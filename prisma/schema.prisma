// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String          @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?         @db.Text
  access_token      String?         @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?         @db.Text
  session_state     String?
  created_at        Int?
  gitlab_webhook    GitlabWebhook[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("Editor")
  private_token String?   @db.Text
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GitlabWebhook {
  id                  String         @id @default(uuid())
  projectId           Int
  object_kind         String
  event_name          String
  before              String
  after               String
  ref                 String
  checkout_sha        String
  message             String?
  user_provider       String
  user_id             String
  user_name           String
  user_username       String
  user_email          String
  user_avatar         String
  total_commits_count Int
  commit              GitlabCommit[]

  account Account       @relation(fields: [user_provider, user_id], references: [provider, providerAccountId])
  project GitlabProject @relation(fields: [projectId], references: [id])
}

model GitlabProject {
  id                   Int             @id
  namespaceId          Int
  groupwareProjectId   String?
  groupwareProjectName String?
  description          String
  name                 String
  name_with_namespace  String
  path                 String
  path_with_namespace  String
  created_at           DateTime
  default_branch       String
  ssh_url_to_repo      String
  http_url_to_repo     String
  web_url              String
  readme_url           String
  avatar_url           String?
  forks_count          Int
  star_count           Int
  last_activity_at     DateTime
  webhook              GitlabWebhook[]

  namespace GitlabNamespace @relation(fields: [namespaceId], references: [id])
}

model GitlabNamespace {
  id                     Int             @id
  name                   String
  path                   String
  kind                   String
  full_path              String
  parent_id              Int?
  avatar_url             String?
  web_url                String
  billable_members_count Int
  seats_in_use           Int?
  max_seats_used         Int?
  plan                   String?
  trial_ends_on          String?
  trial                  Boolean?
  project                GitlabProject[]
}

model GitlabCommit {
  id           String                 @id
  webhookId    String
  message      String
  title        String
  timestamp    DateTime
  url          String
  author_id    Int
  author_name  String
  author_email String
  added        GitlabCommitAdded[]
  modified     GitlabCommitModified[]
  removed      GitlabCommitRemoved[]
  logbook      Logbook?

  webhook GitlabWebhook @relation(fields: [webhookId], references: [id])
}

model GitlabCommitAdded {
  id       String @id @default(uuid())
  commitId String
  filename String

  commit GitlabCommit @relation(fields: [commitId], references: [id])
}

model GitlabCommitModified {
  id       String @id @default(uuid())
  commitId String
  filename String

  commit GitlabCommit @relation(fields: [commitId], references: [id])
}

model GitlabCommitRemoved {
  id       String @id @default(uuid())
  commitId String
  filename String

  commit GitlabCommit @relation(fields: [commitId], references: [id])
}

model Logbook {
  id               String    @id @default(uuid())
  commitId         String    @unique
  tupoksiJabatanId String    @default("62d6421d-be8d-4390-ba5c-252108818350")
  dateSend         DateTime?
  difficultyTask   Int?
  evidenceTask     String?
  workPlace        String    @default("WFH")
  organizerTask    String    @default("JDS")
  isMainTask       Boolean?
  isDocumentLink   Boolean   @default(true)
  isStatus         String

  commit GitlabCommit @relation(fields: [commitId], references: [id])
}
